::cisco::eem::event_register_syslog pattern {.*%LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet[0-9\/]+, changed state to up.*}

#
# This EEM tcl policy was generated by the EEM applet conversion
# utility at http://www.marcuscom.com/convert_applet/
# using the following applet:
#
# event manager applet VLAN1_UP1 authorization bypass
# event syslog pattern ".*%LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet[0-9\/]+, changed state to up.*"
# action 0001 cli command "enable"
# action 0002 cli command "term exec prompt timestamp"
# action 0003 cli command "term length 0"
# action 0010 regexp "GigabitEthernet([0-9\/]+)" "$_syslog_msg" match port
# action 0020 cli command "show int gi$port switchport | i Acc"
# action 0030 regexp "default" "$_cli_result" match def
# action 0040 if "$_regexp_result" eq 1
# action 0050 cli command "conf t"
# action 0060 cli command "int gi$port"
# action 0070 cli command "no shut"
# action 0075 syslog msg "Interface gi$port is on vlan1"
# action 0080 else
# action 0090 syslog msg "Interface gi$port is not on vlan1"
# action 0100 end
#

namespace import ::cisco::eem::*
namespace import ::cisco::lib::*

array set arr_einfo [event_reqinfo]


if [catch {cli_open} result] {
    error $result $errorInfo
} else {
    array set cli1 $result
}

if [catch {cli_exec $cli1(fd) "enable"} _cli_result] {
    error $_cli_result $errorInfo
}

if [catch {cli_exec $cli1(fd) "term exec prompt timestamp"} _cli_result] {
    error $_cli_result $errorInfo
}

if [catch {cli_exec $cli1(fd) "term length 0"} _cli_result] {
    error $_cli_result $errorInfo
}

set _regexp_result [regexp {GigabitEthernet([0-9\/]+)} $arr_einfo(msg) match port]
if [catch {cli_exec $cli1(fd) "show int gi$port switchport | i Acc"} _cli_result] {
    error $_cli_result $errorInfo
}

set _regexp_result [regexp {default} $_cli_result match def]
if {"$_regexp_result" == 1} {
    if [catch {cli_exec $cli1(fd) "conf t"} _cli_result] {
        error $_cli_result $errorInfo
    }

    if [catch {cli_exec $cli1(fd) "int gi$port"} _cli_result] {
        error $_cli_result $errorInfo
    }

    if [catch {cli_exec $cli1(fd) "no shut"} _cli_result] {
        error $_cli_result $errorInfo
    }

    action_syslog msg "Interface gi$port is on vlan1"
} else {
    action_syslog msg "Interface gi$port is not on vlan1"
}

# Close open cli before exit.
catch {cli_close $cli1(fd) $cli1(tty_id)} result